
# A seção 'services' é onde definimos os diferentes contêineres que compõem nossa aplicação.
# Neste caso, temos apenas um serviço, que chamamos de 'api'.
services:
  api:
    # 'container_name' define um nome fixo para o nosso contêiner.
    # Isso facilita a referência em comandos Docker (ex: 'docker logs escola_api').
    # Se não for definido, o Docker gera um nome aleatório.
    container_name: escola_api

    # 'build: .' instrui o Docker Compose a construir uma imagem a partir do Dockerfile
    # localizado no diretório atual (indicado pelo '.').
    build: .

    # 'ports' mapeia uma porta do host (seu computador) para uma porta do contêiner.
    # '- "8000:8000"' significa que a porta 8000 do seu computador será redirecionada
    # para a porta 8000 dentro do contêiner, onde a API está rodando.
    ports:
      - "8000:8000"

    # 'volumes' monta um diretório do host para dentro do contêiner.
    # '- .:/app' espelha o diretório atual ('.') do seu projeto para o diretório '/app' no contêiner.
    # Isso tem duas vantagens principais:
    # 1. Hot-Reload: Qualquer alteração no código-fonte no seu editor é refletida instantaneamente
    #    dentro do contêiner, e o uvicorn com '--reload' reiniciará o servidor.
    # 2. Persistência de Dados: O arquivo do banco de dados 'escola.db', que é criado em '/app',
    #    será salvo no diretório do seu projeto no host, garantindo que os dados não sejam perdidos
    #    quando o contêiner for parado ou recriado.
    volumes:
      - .:/app